// Generated by CoffeeScript 1.4.0
(function() {
  var Instrumenter, calculateColumn, coffee, crypto, escodegen, estraverse, generateTrackerVar, istanbul, removeIndent,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  coffee = require('CoffeeScriptRedux');

  istanbul = require('istanbul');

  crypto = require('crypto');

  escodegen = require('escodegen');

  estraverse = require('estraverse');

  generateTrackerVar = function(filename, omitSuffix) {
    var hash, suffix;
    if (omitSuffix) {
      return '__cov_';
    }
    hash = crypto.createHash('md5');
    hash.update(filename);
    suffix = hash.digest('base64');
    suffix = suffix.replace(/\=/g, '').replace(/\+/g, '_').replace(/\//g, '$');
    return "__cov_" + suffix;
  };

  removeIndent = function(code) {
    return code.replace(/[\uEFEF\uEFFE\uEFFF]/g, '');
  };

  calculateColumn = function(raw, offset) {
    var code, lines;
    code = raw.slice(0, offset);
    lines = code.split(/(?:\n|\r|[\r\n])/g);
    return (removeIndent(lines[lines.length - 1])).length;
  };

  Instrumenter = (function(_super) {

    __extends(Instrumenter, _super);

    function Instrumenter(opt) {
      istanbul.Instrumenter.call(this, opt);
    }

    Instrumenter.prototype.instrumentSync = function(code, filename) {
      var codegenOptions, csast, program;
      filename = filename || ("" + (Date.now()) + ".js");
      this.coverState = {
        path: filename,
        s: {},
        b: {},
        f: {},
        fnMap: {},
        statementMap: {},
        branchMap: {}
      };
      this.currentState = {
        trackerVar: generateTrackerVar(filename, this.omitTrackerSuffix),
        func: 0,
        branch: 0,
        variable: 0,
        statement: 0
      };
      if (typeof code !== 'string') {
        throw new Error('Code must be string');
      }
      if (code[0] === '#') {
        code = "//" + code;
      }
      csast = coffee.parse(code, {
        optimise: false,
        raw: true
      });
      program = coffee.compile(csast, {
        bare: true
      });
      this.attachLocation(program);
      this.walker.startWalk(program);
      codegenOptions = this.opts.codeGenerationOptions || {
        format: {
          compact: !this.opts.noCompact
        }
      };
      return "" + (this.getPreamble(code)) + "\n" + (escodegen.generate(program, codegenOptions)) + "\n";
    };

    Instrumenter.prototype.attachLocation = function(program) {
      return estraverse.traverse(program, {
        leave: function(node, parent) {
          var lines, value, _ref;
          if ((node.offset != null) && ((node.raw != null) || (node.value != null))) {
            value = node.raw != null ? node.raw : typeof node.value === 'string' ? "\"" + (node.value.replace(/"/g, '\\"')) + "\"" : "" + node.value;
            node.loc = {
              start: {
                line: node.line,
                column: calculateColumn(program.raw, node.offset)
              },
              end: {
                line: node.line,
                column: 0
              }
            };
            node.loc.end.column = node.loc.start.column + value.length;
            lines = value.split(/(?:\n|\r|[\r\n])/g);
            if ((_ref = lines.length) !== 0 && _ref !== 1) {
              node.loc.end.line += lines.length - 1;
              node.loc.end.column = removeIndent(lines[lines.length - 1]).length;
            }
          } else {
            node.loc = (function() {
              var _ref1;
              switch (node.type) {
                case 'BlockStatement':
                  return {
                    start: node.body[0].loc.start,
                    end: node.body[node.body.length - 1].loc.end
                  };
                case 'VariableDeclarator':
                  if ((node != null ? (_ref1 = node.init) != null ? _ref1.loc : void 0 : void 0) != null) {
                    return {
                      start: node.id.loc.start,
                      end: node.init.loc.end
                    };
                  } else {
                    return node.id.loc;
                  }
                  break;
                case 'ExpressionStatement':
                  return node.expression.loc;
                case 'ReturnStatement':
                  if (node.argument != null) {
                    return node.argument.loc;
                  } else {
                    return node.loc;
                  }
                  break;
                case 'VariableDeclaration':
                  return {
                    start: node.declarations[0].loc.start,
                    end: node.declarations[node.declarations.length - 1].loc.end
                  };
                default:
                  return {
                    start: {
                      line: 0,
                      column: 0
                    },
                    end: {
                      line: 0,
                      column: 0
                    }
                  };
              }
            })();
          }
        }
      });
    };

    return Instrumenter;

  })(istanbul.Instrumenter);

  module.exports = Instrumenter;

}).call(this);
