// Generated by CoffeeScript 1.10.0
(function() {
  var clean, coffee, ignoreString, semver, utilities;

  coffee = require('coffee-script');

  semver = require('semver');

  ignoreString = '/* istanbul ignore next: coffeescript utility boilerplate */';

  utilities = {
    "extends": {
      '1.8.0': {
        original: '__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }',
        replacement: "__extends = function(child, parent) { for (var key in parent) { " + ignoreString + " if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }"
      },
      '1.9.0': {
        original: 'extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }',
        replacement: "extend = function(child, parent) { for (var key in parent) { " + ignoreString + " if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }"
      },
      '1.10.0': {
        original: 'extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }',
        replacement: "extend = function(child, parent) { for (var key in parent) { " + ignoreString + " if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }"
      }
    },
    indexOf: {
      '1.8.0': {
        original: '__indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; }',
        replacement: "__indexOf = " + ignoreString + " [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { " + ignoreString + " if (i in this && this[i] === item) return i; } return -1; }"
      },
      '1.9.0': {
        original: 'indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; }',
        replacement: "indexOf = " + ignoreString + " [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { " + ignoreString + " if (i in this && this[i] === item) return i; } return -1; }"
      },
      '1.10.0': {
        original: 'indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; }',
        replacement: "indexOf = " + ignoreString + " [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { " + ignoreString + " if (i in this && this[i] === item) return i; } return -1; }"
      }
    }
  };

  clean = function(compiledJS) {
    var newCompiledJS, utility, utilityKey, utilityVersions, version;
    switch (semver.minor(coffee.VERSION)) {
      case 8:
        version = '1.8.0';
        break;
      case 9:
        version = '1.9.0';
        break;
      case 10:
        version = '1.10.0';
        break;
      default:
        return compiledJS;
    }
    newCompiledJS = compiledJS;
    for (utilityKey in utilities) {
      utilityVersions = utilities[utilityKey];
      if (utility = utilityVersions[version]) {
        newCompiledJS = newCompiledJS.replace(utility.original, utility.replacement);
      }
    }
    return newCompiledJS;
  };

  module.exports = clean;

}).call(this);
